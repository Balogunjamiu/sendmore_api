const request = require('supertest')
const Task = require('../src/models/task')
const app = require('../src/app')
const {userOneId, taskOne, userOne, userTwo, setupDatabase} = require('./fixtures/db')
beforeEach(setupDatabase)
test('should create task for users', async ()=>{
    const response = await request(app)
    .post('/tasks')
    .set('Authorization', `Bearer ${userOne.tokens[0].token}`)
    .send({
        description:'From my test'
    })
    .expect(201)    
    const task = await Task.findById(response.body._id)
    expect(task).not.toBeNull()
    expect(task.completed).toBe(false)
})
test('should get all Tasks', async ()=>{
    result = await request(app).get('/tasks')
    .set('Authorization', `Bearer ${userOne.tokens[0].token}`)
    .send()
    .expect(200)
    expect(result.body).not.toBeNull()
    expect(result.body.length).toBe(2)
})
test('should get all task', async ()=>{
    result = await request(app).get('/tasks')
    .set('Authorization', `Bearer ${userTwo.tokens[0].token}`)
    .send()
    .expect(200)
    expect(result.body).not.toBeNull()
     expect(result.body.length).toBe(1) 
})
test('should not delete unauthenticated user task', async () =>{
    await request(app).delete(`/tasks/${taskOne._id}`)
    .set('Authorization', `Bearer ${userTwo.tokens[0].token}`)
    .send()
    .expect(404)
    const task = await Task.findById(taskOne._id)
    expect(task).not.toBeNull()
})
